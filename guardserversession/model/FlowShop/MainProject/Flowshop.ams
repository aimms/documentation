## ams_version=1.0

Model Main_Flow_Shop {
	Comment: {
		"Keywords:
		CallBackNewIncumbent, MIP model, Gantt chart, AsynchronousExecute, GMP."
	}
	Quantity SI_Time_Duration {
		BaseUnit: s;
		Conversions: {
			tick   ->s : #-># / 100,
			second ->s : #->#,
			minute ->s : #-># * 60,
			hour   ->s : #-># * 3600,
			day    ->s : #-># * 86400,
			week   ->s : #-># * 604800,
			month  ->s : #-># * 2628000,
			year   ->s : #-># * 31536000,
			century->s : #-># * 3153600000
		}
		Comment: "Expresses the value for the duration of periods.";
	}
	Section Superfluous_Data {
		Procedure pr_fillDummy {
			Body: {
				p_dummy(i_d1, i_d2, i_d3):=(ord(i_d1)*ord(i_d2)*ord(i_d3))/(ord(i_d1)+ord(i_d2)+ord(i_d3));
			}
		}
		Parameter p_dummySize {
			InitialData: {
				! 499 ! Set to 499 to generate 800+ Mb files ;-)
				9 ! To get small amount of overhead.
			}
		}
		Set s_dummy {
			SubsetOf: Integers;
			Index: i_d, i_d1, i_d2, i_d3;
			Definition: ELementRange(0,p_dummySize);
		}
		Parameter p_dummy {
			IndexDomain: (i_d1,i_d2,i_d3);
		}
		Procedure pr_saveSeemProCase {
			Body: {
				s_inputCaseIdentifierSet := 
				    pro::ManagedSessionInputCaseIdentifierSet - 
				    pro::ManagedSessionRemoveFromCaseIdentifierSet ;
				CaseFileSave(
				    url      :  "testcase.data", 
				    contents :  s_inputCaseIdentifierSet);
			}
			Set s_inputCaseIdentifierSet {
				SubsetOf: AllIdentifiers;
			}
		}
		Module Module_1 {
			Prefix: m1;
			Parameter p1 {
				InitialData: 33.33;
			}
		}
	}
	Section WebUI_support {
		Set AllPublicIdentifiers {
			SubsetOf: AllIdentifiers;
			Definition: Main_Flow_Shop;
		}
		Section Gantt_Chart {
			Procedure pr_prepInterface {
				Body: {
					p_gcJobStart(j,m)  := v_startTime( first(s | bv_jobSchedule(j,s)),m);
					p_gcJobDuration(j,m) := p_procesTime(j,m);
				}
				Comment: "Prepare parameters used in WebUI Gantt Chart.";
			}
			StringParameter sp_refTime {
				Definition: "2000-01-01 01:01:01";
			}
			StringParameter sp_EndTime {
				Definition: "2000-01-07 01:01:01";
			}
			Parameter p_gcJobStart {
				IndexDomain: (j,m);
			}
			Parameter p_gcJobDuration {
				IndexDomain: (j,m);
			}
			StringParameter sp_jobDescription {
				IndexDomain: (j);
				Text: "Description of jobs that can be used inside the Gantt Chart";
				Definition: {
					FormatString("J%i", ord(j));
				}
			}
			StringParameter sp_machineDescription {
				IndexDomain: (m);
				Text: "Description of machines that can be used inside the Gantt Chart";
				Definition: {
					FormatString("M%i", ord(m));
				}
			}
			Set s_gcWidgetActionNumbers {
				SubsetOf: Integers;
				Index: i_gcwan;
				Definition: ElementRange(1,9);
			}
			StringParameter sp_gcWidgetActions {
				IndexDomain: (i_gcwan,webui::indexWidgetActionSpec);
				Definition: {
					data { 
						( 1, displaytext ) : "Optimize",  
						( 1, icon        ) : "aimms-blog2",  
						( 1, procedure   ) : "pr_BtnSolve",  
						( 1, state       ) : "Active"  ,
					
						( 2, displaytext ) : "EmptyAction",  
						( 2, icon        ) : "aimms-bubble-blocked",  
						( 2, procedure   ) : "pr_action",  
						( 2, state       ) : "Active"  
					
					
					}
				}
			}
		}
	}
	Section WinUI_support {
		Parameter p_interfaceStartTime {
			IndexDomain: (j,m);
		}
		Parameter p_interfaceProcesTime {
			IndexDomain: (s,m);
		}
		Procedure pr_prepInterfaceWinUI {
			Body: {
				p_interfaceStartTime(j,m)  := v_startTime( first(s | bv_jobSchedule(j,s)),m);
				p_interfaceProcesTime(s,m) := sum (j | bv_jobSchedule(j,s), p_procesTime(j,m));
			}
			Comment: "Set parameters used in WinUI Gantt Chart.";
		}
	}
	Parameter p_maxJobs {
		Text: "Number of elements in the set Jobs";
		Range: integer;
	}
	Set s_jobs {
		Text: "Set of all Jobs";
		Index: j, j2;
		Definition: {
			ElementRange(1,p_maxJobs, prefix: "Job-");
		}
	}
	Set s_schedules {
		Text: "Set of all schedules";
		Index: s;
		Definition: {
			ElementRange(1,p_maxJobs, prefix: "Pos-");
		}
	}
	Parameter p_maxMachines {
		Text: "Number of elements in the set Machines";
		Range: integer;
	}
	Set s_machines {
		Text: "Set of all machines";
		Index: m;
		Definition: {
			ElementRange(1,p_maxMachines, prefix: "M-");
		}
	}
	Parameter p_procesTime {
		IndexDomain: (j,m);
		Text: "Time required to process job j on machine m";
	}
	Variable bv_jobSchedule {
		IndexDomain: (j,s);
		Text: "Determining the place of the job";
		Range: binary;
	}
	Variable v_startTime {
		IndexDomain: (s,m);
		Text: "The time at which job in schedule position s commences processing on machine m";
		Range: nonnegative;
	}
	Constraint c_oneJobPerSchedule {
		IndexDomain: (s);
		Text: "Only one job is related to every schedule";
		Definition: sum(j, bv_jobSchedule(j,s)) = 1;
	}
	Constraint c_oneSchedulePerJob {
		IndexDomain: (j);
		Text: "Only one schedule is related to every job";
		Definition: sum(s, bv_jobSchedule(j,s)) = 1;
	}
	Constraint c_machineStartTime {
		IndexDomain: (s,m) | m <> last(s_machines);
		Text: "The commencement of schedule s on machine m+1 is no earlier then its finish on machine m";
		Definition: v_startTime(s,m + 1) >=  v_startTime(s,m) + sum(j, p_procesTime(j,m)*bv_jobSchedule(j,s));
	}
	Constraint c_scheduleStartTime {
		IndexDomain: (s,m) | s <> last(s_schedules);
		Text: "The commencement of schedule s + 1 on machine m is no earlier then the finish time of job j on machine m";
		Definition: v_startTime(s + 1,m) >=  v_startTime(s,m) + sum(j, p_procesTime(j,m)*bv_jobSchedule(j,s));
	}
	Variable v_timeSpan {
		Text: "Total time to process all jobs on all machines";
		Definition: v_startTime(Last(s),last(m)) + sum(j, p_procesTime(j,last(m))*bv_jobSchedule(j,Last(s)));
	}
	MathematicalProgram mp_flowShopModel {
		Objective: v_timeSpan;
		Direction: minimize;
		Constraints: AllConstraints;
		Variables: AllVariables;
	}
	Section MainModelProcedures {
		Procedure MainInitialization {
			Body: {
				
				
				ProfilerStart();
				gss::pr_setTracinglevel( 'trace' );
				gss::pr_setReplicationSessionLog( 1 );
			}
		}
		Procedure PostMainInitialization {
			Body: {
				pr_fillDummy();
				
				p_maxJobs 	:= 4;
				p_maxMachines 	:= 8;
				
				pr_generateData;
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				return 1;
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
		}
	}
	Procedure pr_action {
		Body: {
			gss::pr_enter(sp_gssTime, p_gssMiU, ep_messageImportance: 'info');
			block 
				pr_workAction();
			onerror ep_err do
				gss::pr_appendError( ep_err );
				errh::MarkAsHandled( ep_err );
			endblock ;
			gss::pr_leave(sp_gssTime, p_gssMiU, ep_messageImportance: 'info');
		}
		DeclarationSection gss_logging_declarations {
			StringParameter sp_gssTime;
			Parameter p_gssMiU;
		}
		DeclarationSection error_reference_declaration {
			ElementParameter ep_err {
				Range: errh::PendingErrors;
			}
		}
	}
	Procedure pr_workAction {
		Body: {
			pr_helperAction();
		}
	}
	Procedure pr_helperAction {
		Body: {
			gss::pr_enter(sp_gssTime, p_gssMiU);
			gss::pr_appendMessage("Trying to help out here");
			gss::pr_leave(sp_gssTime, p_gssMiU);
		}
		DeclarationSection gss_logging_declarations {
			StringParameter sp_gssTime;
			Parameter p_gssMiU;
		}
	}
	Procedure pr_generateData {
		Body: {
			p_procesTime(j,m) := round(Uniform(1,20));
		}
	}
	Procedure pr_GC_LoadResultsCallback {
		Arguments: (sp_requestID);
		Body: {
			gss::LoadResultsCallBack(sp_requestID);
		}
		StringParameter sp_requestID {
			Property: Input;
		}
	}
	Procedure pr_workSolve {
		Body: {
			gss::pr_enter(sp_gssTime, p_gssMiU);
			
			gss::pr_AppendMessage(
				FormatString("Request description is %s",
					pro::workerRequestDescription));
			
			gss::pr_AppendMessage(
				FormatString("Going to solve flowshop for %i jobs on %i machines",
					p_maxJobs, p_maxMachines));
			
			Empty AllVariables;
			
			raise warning "Cry wolf." ;
			
			solve mp_flowShopModel  ;
			
			delay(1);
			
			raise warning "Hi, hi, false alarm.";
			
			gss::pr_AppendMessage(
				FormatString("Finished solving flowshop for %i jobs on %i machines",
					p_maxJobs, p_maxMachines));
			
			gss::pr_leave(sp_gssTime, p_gssMiU);
		}
		DeclarationSection gss_logging_declarations {
			StringParameter sp_gssTime;
			Parameter p_gssMiU;
		}
	}
	Procedure pr_solve {
		Body: {
			if pro::GetPROEndPoint() then
				if pro::DelegateToServer( 
					requestDescription :  formatString( "Flowshop for %i jobs and %i machines", p_maxJobs, p_maxMachines ),
					waitForCompletion  :  1, 
					completionCallback :  'pr_GC_LoadResultsCallback' ) then	
					return 1;
				endif ;
			endif ;
			
			gss::pr_GuardAndProfileServerJob( 'pr_WorkSolve' );
		}
	}
	Procedure pr_btnSolve {
		Body: {
			gss::pr_enter(sp_gssTime, p_gssMiU, ep_messageImportance: 'info');
			block 
				raise warning "Don't look down" ;
				gss::pr_appendMessage( "Let it rain");
				pr_solve();
				pr_prepInterface();
				raise warning "Look up, it is raining ;-)" ;
			onerror ep_err do
				gss::pr_appendError( ep_err );
				errh::MarkAsHandled( ep_err );
			endblock ;
			gss::pr_leave(sp_gssTime, p_gssMiU, ep_messageImportance: 'info');
		}
		DeclarationSection gss_logging_declarations {
			StringParameter sp_gssTime;
			Parameter p_gssMiU;
		}
		ElementParameter ep_err {
			Range: errh::PendingErrors;
		}
	}
	Procedure pr_generateTest {
		Body: {
			gss::pr_artificialDataGSSPage;
			gss::pr_openPageErrorWarningProfiler;
			!
		}
	}
	Procedure RunAllTests {
		Body: {
			if not DirectoryExists( "log" ) then 
				DirectoryCreate( "log" );
			endif ;
			
			ep_proc := StringToElement( AllIdentifiers, "aimmsunit::DetermineTestSuites",   create: 0 );
			if ep_proc then Apply( ep_proc ); endif ;
			ep_proc := StringToElement( AllIdentifiers, "aimmsunit::RunSelectedTestSuites", create: 0 );
			if ep_proc then Apply( ep_proc ); endif ;
		}
		ElementParameter ep_proc {
			Range: AllProcedures;
			Default: 'MainExecution';
		}
	}
}
